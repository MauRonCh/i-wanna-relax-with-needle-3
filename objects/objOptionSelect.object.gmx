<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSystem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu = 0;
select = array_repeat(0, 2);
spacing = 50;
totalOptions = 6;
totalControls = 10;
changingControls = false;
keyNames = new_array(
    "Left",
    "Right",
    "Jump",
    "Shoot",
    "Down",
    "Up",
    "Restart",
    "Pause",
    "Suicide"
);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (changingControls &amp;&amp; scrButtonPressed(vk_anykey)) {
    var key = keyboard_key;
    
    if (key == 160 || key == 161) {
        key = 16;
    }
    
    switch (select[menu]) {
        case 0: global.leftButton = key; break;
        case 1: global.rightButton = key; break;
        case 2: global.jumpButton = key; break;
        case 3: global.shootButton = key; break;
        case 4: global.downButton = key; break;
        case 5: global.upButton = key; break;
        case 6: global.restartButton = key; break;
        case 7: global.pauseButton = key; break;
        case 8: global.suicideButton = key; break;
    }
    
    event_user(0);
    scrSaveConfig();
    audio_play_sound(sndPingM2, 0, false);
    changingControls = false;
    exit;
}

if (scrButtonPressed(global.menuUpButton)) {
    select[menu]--;
    audio_play_sound(sndPingM3, 0, false);
}

if (scrButtonPressed(global.menuDownButton)) {
    select[menu]++;
    audio_play_sound(sndPingM3, 0, false);
}

if (menu == 0) {
    select[menu] += totalOptions;
    select[menu] %= totalOptions;

    switch (select[menu]) {
        case 0:
            if (scrButtonHeld(global.menuLeftButton) &amp;&amp; global.soundVolume &gt; 0) {
                global.soundVolume -= 0.01;
            } else if (scrButtonHeld(global.menuRightButton) &amp;&amp; global.soundVolume &lt; 1) {
                global.soundVolume += 0.01;
            }
            
            global.soundVolume = clamp(global.soundVolume, 0, 1);
            audio_master_gain(global.soundVolume);
            break;
            
        case 1:
            if (scrButtonPressed(global.menuAcceptButton)) {
                global.fullscreenMode = !global.fullscreenMode;
                scrSetDisplay();
                audio_play_sound(sndPingM2, 0, false);
            }
            break;
            
        case 2:
            if (scrButtonPressed(global.menuAcceptButton)) {
                global.vsyncMode = !global.vsyncMode;
                scrSetDisplay();
                audio_play_sound(sndPingM2, 0, false);
            }
            break;
            
        case 3:
            if (scrButtonPressed(global.menuAcceptButton)) {
                global.smoothMode = !global.smoothMode;
                scrSetDisplay();
                audio_play_sound(sndPingM2, 0, false);
            }
            break;
            
        case 4:
            if (scrButtonPressed(global.menuAcceptButton)) {
                global.soundVolume = 1;
                global.fullscreenMode = false;
                global.vsyncMode = false;
                global.smoothMode = false;
                
                audio_master_gain(global.soundVolume);
                scrSetDisplay();
                audio_play_sound(sndPingM2, 0, false);
            }
            break;
            
        case 5:
            if (scrButtonPressed(global.menuAcceptButton)) {
                menu = 1;
                audio_play_sound(sndPingM2, 0, false);
            }
            break;
    }
    
    if (scrButtonPressed(global.menuBackButton) &amp;&amp; !instance_exists(objGoControls2)) {
        scrSaveConfig();
    var a = instance_create(-400, 0, objGoControls2);
        a.valY = -608;
        a.valX = 0;
    var b = instance_create(1200, 0, objGoControls2);
        b.valY = 608;
        b.valX = 400;
        audio_play_sound(sndPing, 0, false);
    }
} else if (menu == 1) {
    select[menu] += totalControls;
    select[menu] %= totalControls;
    
    if (scrButtonPressed(global.menuAcceptButton)) {
        if (select[menu] == totalControls - 1) {
            scrDefaultControls();
            event_user(0);
            scrSaveConfig();
            audio_play_sound(sndPingM2, 0, false);
        } else {
            changingControls = true;
            audio_play_sound(sndPingM3, 0, false);
        }
    }

    if (scrButtonPressed(global.menuBackButton)) {
        menu = 0;
        audio_play_sound(sndPingM2, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyBinds = new_array(
    scrGetKeybind(global.leftButton),
    scrGetKeybind(global.rightButton),
    scrGetKeybind(global.jumpButton),
    scrGetKeybind(global.shootButton),
    scrGetKeybind(global.downButton),
    scrGetKeybind(global.upButton),
    scrGetKeybind(global.restartButton),
    scrGetKeybind(global.pauseButton),
    scrGetKeybind(global.suicideButton),
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_colour(c_white);
draw_set_font(fntOptions);

if (menu == 0) {
    draw_text(x, y + spacing * 0 + 100, string_interp("Sound Volume: {0}%", ceil(global.soundVolume * 100)));
    draw_text(x, y + spacing * 1 + 100, string_interp("Fullscreen: {0}", cond_exp(global.fullscreenMode, "Yes", "No")));
    draw_text(x, y + spacing * 2 + 100, string_interp("VSync: {0}", cond_exp(global.vsyncMode, "Yes", "No")));
    draw_text(x, y + spacing * 3 + 100, string_interp("Smooth Mode: {0}", cond_exp(global.smoothMode, "Yes", "No")));
    draw_text(x, y + spacing * 4 + 100, "Reset To Defaults");
    draw_text(x, y + spacing * 5 + 100, "Change Controls");
    
    draw_sprite(sprCherry2, 0, x - 240, y + 125 + spacing * select[menu]);
    draw_sprite(sprCherryBlue2, 0, x + 240, y + 125 + spacing * select[menu]);
} else if (menu == 1) {
    for (var i = 0; i &lt; totalControls - 1; i++) {
        var bind = keyBinds[i];
        
        if (changingControls &amp;&amp; select[menu] == i) {
            bind = "---";
        }
        
        draw_text(x, y + spacing * i, string_interp("{0} Button: {1}", keyNames[i], bind));
    }

    draw_text(x, y + spacing * (totalControls - 1), "Default Controls");
    draw_sprite(sprCherry2, 0, x - 240, y + 25 + spacing * select[menu]);
    draw_sprite(sprCherryBlue2, 0, x + 240, y + 25 + spacing * select[menu]);
}



draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(fntMenu3);
draw_text(225, 550, "[Z] Back");
draw_text(550, 550, "[Shift] Accept");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
