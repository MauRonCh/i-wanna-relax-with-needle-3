<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWorld</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(object_index) &gt; 1) {
    instance_destroy();
    exit;
}

timeMicro = 0;
pauseDelay = 0;
pauseSurf = noone;
prevSpd = 50;

global.psys2 = part_system_create();
part_system_depth(global.psys2,0);

global.psys = part_system_create();
part_system_depth(global.psys,-100);
///RWN3 particles
global.relax3 = part_type_create();
part_type_shape(global.relax3,pt_shape_disk);
part_type_color_hsv(global.relax3,0,170,255,255,255,255);
part_type_alpha3(global.relax3,0.0000,0.10,0.0000);
part_type_life(global.relax3,100.0000,100.0000);
part_type_size(global.relax3,0.2221,0.2799,0.0019,0.0003);
part_type_speed(global.relax3,1.0000,2.0000,-0.0048,0.2105);
part_type_direction(global.relax3,45.0000,135.0000,0.0000,0.4095);
part_type_orientation(global.relax3,0.0000,360.0000,-2.2791,-0.5432,0);
part_type_gravity(global.relax3,0.0500,80.0000);
part_type_blend(global.relax3,true);
///RWN3 particles EXTRA
global.parRelax3Ex = part_type_create();
part_type_shape(global.parRelax3Ex,pt_shape_disk);
part_type_color_hsv(global.parRelax3Ex,0,127,127,127,255,255);
part_type_alpha3(global.parRelax3Ex,0.0000,0.1000,0.0000);
part_type_life(global.parRelax3Ex,100.0000,100.0000);
part_type_size(global.parRelax3Ex,0.2221,0.2799,0.0019,0.0003);
part_type_speed(global.parRelax3Ex,1.0000,2.0000,-0.0048,0.2105);
part_type_direction(global.parRelax3Ex,45.0000,135.0000,0.0000,0.4095);
part_type_orientation(global.parRelax3Ex,0.0000,360.0000,-2.2791,-0.5432,0);
part_type_gravity(global.parRelax3Ex,0.0500,270.0000);
part_type_blend(global.parRelax3Ex,true);
///Extra particles
global.exPar = part_type_create();
part_type_shape(global.exPar,pt_shape_ring);
part_type_color3(global.exPar,4194368,9796518,8264443);
part_type_alpha3(global.exPar,0.0000,0.5000,0.0000);
part_type_life(global.exPar,100.0000,200.0000);
part_type_size(global.exPar,0.2000,0.3000,0.0011,0.0100);
part_type_speed(global.exPar,0.2000,0.3000,0.0265,0.0100);
part_type_direction(global.exPar,0.0000,360.0000,0.5000,0.0000);
part_type_orientation(global.exPar,0.0000,360.0000,0.0000,2.3835,0);
part_type_gravity(global.exPar,0.0000,270.0000);
part_type_blend(global.exPar,false);
///Save particles
global.savePar = part_type_create();
part_type_shape(global.savePar,pt_shape_square);
part_type_color_hsv(global.savePar,85,85,127,255,255,255);
part_type_alpha2(global.savePar,0.40000,0.0000);
part_type_life(global.savePar,100.0000,100.0000);
part_type_size(global.savePar,0.1000,0.1453,0.0020,0.1000);
part_type_speed(global.savePar,10.0000,10.0000,0.1000,5.0000);
part_type_direction(global.savePar,0.0000,360.0000,5.0000,0.1000);
part_type_orientation(global.savePar,0.0000,360.0000,-3.8374,-0.1000,0);
part_type_gravity(global.savePar,0.0000,270.0000);
part_type_blend(global.savePar,false);
///Subwarp particles
global.efWarp = part_type_create();
part_type_shape(global.efWarp,pt_shape_flare);
part_type_color2(global.efWarp,8454143,4259584);
part_type_alpha3(global.efWarp,0.9824,0.8981,0.0000);
part_type_life(global.efWarp,40.0000,50.0000);
part_type_size(global.efWarp,0.2990,0.3736,0.0025,0.0087);
part_type_speed(global.efWarp,0.7467,2.9904,0.0044,0.0196);
part_type_direction(global.efWarp,0.0000,360.0000,-0.1364,0.9049);
part_type_orientation(global.efWarp,0.0000,360.0000,2.9678,1.5428,0);
part_type_gravity(global.efWarp,0.0000,270.0000);
part_type_blend(global.efWarp,false);
///Warp next part
global.warpPar = part_type_create();
part_type_shape(global.warpPar,pt_shape_disk);
part_type_color_hsv(global.warpPar,0,212,127,127,255,255);
part_type_alpha3(global.warpPar,1.0000,1.0000,0.0000);
part_type_life(global.warpPar,60.0000,100.0000);
part_type_size(global.warpPar,0.1106,0.3678,0.0010,0.0200);
part_type_speed(global.warpPar,1.0000,4.0000,0.1000,-0.0081);
part_type_direction(global.warpPar,0.0000,360.0000,1.0000,4.0000);
part_type_orientation(global.warpPar,0.0000,360.0000,1.0000,2.7684,0);
part_type_gravity(global.warpPar,0.0000,270.0000);
part_type_blend(global.warpPar,false);
///RWN1
global.relaxP = part_type_create();
part_type_sprite(global.relaxP,sprEffectRWN1,0,0,0);
part_type_size(global.relaxP,1,1,0,0);
part_type_scale(global.relaxP,1,1);
part_type_color3(global.relaxP,16777215,8454143,12632256);
part_type_alpha3(global.relaxP,0.20,0.70,0);
part_type_speed(global.relaxP,1,2.50,0,0);
part_type_direction(global.relaxP,0,359,0,0);
part_type_orientation(global.relaxP,0,0,0,0,1);
part_type_blend(global.relaxP,0);
part_type_life(global.relaxP,60,100);

///Extra jump
global.exJ = part_type_create();
part_type_shape(global.exJ,pt_shape_spark);
part_type_color_hsv(global.exJ,0,233,255,255,255,255);
part_type_alpha2(global.exJ,1.0000,0.0000);
part_type_life(global.exJ,10.0000,30.0000);
part_type_size(global.exJ,0.1022,0.2051,-0.0021,-0.0072);
part_type_speed(global.exJ,2.0000,3.9994,-0.0314,-0.1420);
part_type_direction(global.exJ,0.0000,360.0000,0.1631,0.6328);
part_type_orientation(global.exJ,0.0000,360.0000,1.4779,-2.8267,0);
part_type_gravity(global.exJ,0.0000,270.0000);
part_type_blend(global.exJ,false);

///Save RWN2
global.partiparti = part_type_create();
part_type_shape(global.partiparti,pt_shape_explosion);
part_type_color3(global.partiparti,32768,65280,8454016);
part_type_alpha3(global.partiparti,0.8000,0.9645,0.7000);
part_type_life(global.partiparti,50.0000,70.0000);
part_type_size(global.partiparti,0.1233,0.3363,-0.0042,-0.0104);
part_type_speed(global.partiparti,2.4077,4.8856,-0.0030,-0.1512);
part_type_direction(global.partiparti,0.0000,360.0000,-0.7799,-0.5766);
part_type_orientation(global.partiparti,0.0000,360.0000,-0.3826,-1.9557,0);
part_type_gravity(global.partiparti,0.0000,360.0000);
part_type_blend(global.partiparti,false);

///Particles RWN2
global.effectRelax = part_type_create();
part_type_shape(global.effectRelax,pt_shape_flare);
part_type_color1(global.effectRelax,-1);
part_type_alpha3(global.effectRelax,0.0000,0.2000,0.0000);
part_type_life(global.effectRelax,100.0000,150.0000);
part_type_size(global.effectRelax,0.6000,0.8000,-0.0002,0.0000);
part_type_speed(global.effectRelax,1.0000,1.0000,0.0000,0.0043);
part_type_direction(global.effectRelax,0.0000,360.0000,0.0000,2.0000);
part_type_orientation(global.effectRelax,0.0000,360.0000,1.6787,-2.9454,0);
part_type_gravity(global.effectRelax,0.0000,90.0000);
part_type_blend(global.effectRelax,true);

///Particles clear Extra
global.clearEXP = part_type_create();
part_type_shape(global.clearEXP,pt_shape_cloud);
part_type_color_mix(global.clearEXP,14590344,8454143);
part_type_alpha2(global.clearEXP,0.8567,0.0000);
part_type_life(global.clearEXP,100.0000,200.0000);
part_type_size(global.clearEXP,0.2506,0.3174,0.0000,-0.0132);
part_type_speed(global.clearEXP,4.0000,10.0000,-0.0230,-0.1968);
part_type_direction(global.clearEXP,0.0000,360.0000,-0.8211,0.8659);
part_type_orientation(global.clearEXP,0.0000,360.0000,-0.6602,0.1335,0);
part_type_gravity(global.clearEXP,0.0000,270.0000);
part_type_blend(global.clearEXP,true);

///Final Stage 1-2
global.finalS1 = part_type_create();
part_type_shape(global.finalS1,pt_shape_flare);
part_type_color_mix(global.finalS1,12632256,16777215);
part_type_alpha3(global.finalS1,0.0000,0.5000,0.0000);
part_type_life(global.finalS1,40.0000,70.0000);
part_type_size(global.finalS1,0.2537,0.5264,0.0049,0.0185);
part_type_speed(global.finalS1,0.3000,1.0000,-0.0500,0.0358);
part_type_direction(global.finalS1,180.0000,360.0000,0.0010,0.5000);
part_type_orientation(global.finalS1,0.0000,360.0000,-1.4289,0.7724,0);
part_type_gravity(global.finalS1,0.0700,270.0000);
part_type_blend(global.finalS1,true);

global.finalS2 = part_type_create();
part_type_shape(global.finalS2,pt_shape_flare);
part_type_color_mix(global.finalS2,12632256,16777215);
part_type_alpha3(global.finalS2,0.0000,0.5000,0.0000);
part_type_life(global.finalS2,40.0000,70.0000);
part_type_size(global.finalS2,0.2537,0.5264,0.0049,0.0185);
part_type_speed(global.finalS2,0.3000,1.0000,-0.0500,0.0358);
part_type_direction(global.finalS2,180.0000,360.0000,0.0010,0.5000);
part_type_orientation(global.finalS2,0.0000,360.0000,-1.4289,0.7724,0);
part_type_gravity(global.finalS2,0.0700,90.0000);
part_type_blend(global.finalS2,true);

//Avoidance transitions
global.avPar = part_type_create();
part_type_shape(global.avPar,pt_shape_spark);
part_type_color3(global.avPar,16777215,8454143,8421504);
part_type_alpha2(global.avPar,0.6170,0.0000);
part_type_life(global.avPar,40.0000,50.0000);
part_type_size(global.avPar,0.2160,0.4130,-0.0024,-0.0051);
part_type_speed(global.avPar,1.0703,1.5000,-0.0166,0.0544);
part_type_direction(global.avPar,0.0000,360.0000,1.1986,-0.9122);
part_type_orientation(global.avPar,0.0000,360.0000,-1.3527,-1.3956,0);
part_type_gravity(global.avPar,0.0000,270.0000);
part_type_blend(global.avPar,true);

//Rain avoidance
global.rainP = part_type_create();
part_type_shape(global.rainP,pt_shape_line);
part_type_color2(global.rainP,12632256,8421504);
part_type_alpha1(global.rainP,0.8);
part_type_life(global.rainP,100.0000,100.0000);
part_type_size(global.rainP,0.1684,0.3500,-0.0004,-0.0159);
part_type_speed(global.rainP,13.0000,18.0000,-0.0055,-0.0096);
part_type_direction(global.rainP,-65.0000,-68.0000,0.0000,0.0000);
part_type_orientation(global.rainP,-65.0000,-68.0000,0.0000,0.0000,0);
part_type_gravity(global.rainP,0.0000,270.0000);
part_type_blend(global.rainP,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main inputs
texture_set_interpolation(global.smoothMode);

if (global.gameStarted) {
    if (!global.gamePaused) {
        //Restarting game
        if (scrButtonPressed(global.restartButton)) {
            if (global.debugMode) {
                prevSpd = room_speed;
            }    
        
            scrRestartGame();
        }
            
        //Incrementing game time
        if (global.timeWhenDead || instance_exists(objPlayer)) {
            timeMicro += delta_time;
            global.time += timeMicro div 1000000;
            timeMicro %= 1000000;
        }
    } else {
        if (scrButtonHeld(global.leftButton)) {
            global.soundVolume -= 0.01;
        } else if (scrButtonHeld(global.rightButton)) {
            global.soundVolume += 0.01;
        }
        
        global.soundVolume = clamp(global.soundVolume, 0, 1);
        audio_master_gain(global.soundVolume);
    }

    //Pausing game
    if (pauseDelay &lt; global.totalPauseDelay) {
        pauseDelay++;
    } else if (!global.noPause &amp;&amp; scrButtonPressed(global.pauseButton)) {
        global.gamePaused = !global.gamePaused;
    
        if (global.gamePaused) {
            pauseSpr = sprite_create_from_surface(application_surface, 0, 0, display_get_gui_width(), display_get_gui_height(), false, false, 0, 0);
            instance_deactivate_all(true);
        } else {
            instance_activate_all();
            
            if (sprite_exists(pauseSpr)) {
                sprite_delete(pauseSpr);
            }
                
            scrSaveConfig();
            io_clear();
        }
        
        pauseDelay = 0;
    }
}

scrSetCaption();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc. input
if (!global.gamePaused) {
    //Fullscreen window
    if (scrButtonPressed(vk_f4)) {
        global.fullscreenMode = !global.fullscreenMode;
        scrSetDisplay();
        scrSaveConfig();
    }
    
    //Teleport to clear room when the game has been cleared (useful for portal rooms)
    if (global.useClearRoom &amp;&amp; global.gameStarted &amp;&amp; global.clear &amp;&amp; instance_exists(objPlayer) &amp;&amp; scrButtonPressed(global.clearButton)) {
        instance_destroy(objPlayer);
        room_goto(global.clearRoom);
    }
}

//Resetting game
if (scrButtonPressed(vk_f2)) {
    audio_stop_all();
    instance_destroy(objParticlesRWN3);
    instance_destroy(objParticlesRWN2);
    instance_destroy(objParticlesRWN1);
    instance_destroy(objParticlesEX);
    instance_destroy(objParticlesRWN3EX);
    instance_destroy(objParticlesEXFinal);
    instance_destroy(objRainParticles);
    instance_destroy(objParticlesAvoidance);
    game_restart();
}

//Closing game
if (scrButtonPressed(vk_escape)) {
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug inputs
if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused) {
    //Hides the debug overlay
    if (scrButtonPressed(global.debugHideButton)) {
        global.debugOverlay = !global.debugOverlay;
    }

    //Toggles god mode
    if (scrButtonPressed(global.debugGodButton)) {
        global.debugGodMode = !global.debugGodMode;
    }
    
    //Toggles infinite jump
    if (scrButtonPressed(global.debugInfButton)) {
        global.debugInfJump = !global.debugInfJump;
    }

    if (instance_exists(objPlayer)) {
        if (global.debugInfJump) {
            objPlayer.jumpsLeft = 1;
        }
    
        //Save at any given time
        if (scrButtonPressed(global.debugSaveButton)) {
            scrSaveGame(true);
            audio_play_sound(sndBlockChange, 0, false);
        }
        
        //Teleport to the mouse's location
        if (mouse_check_button_pressed(global.debugMouseButton)) {
            instance_destroy(objPlayer);
            instance_create(mouse_x, mouse_y, objPlayer);
        }
    }
    
    //Go to previous room
    if (scrButtonPressed(global.debugRoomButtonU)) {
        if (room_get_name(room_previous(room)) != "rDiffs") {
            instance_destroy(objPlayer);
            room_goto_previous();
        }
    }
    
    //Go to next room
    if (scrButtonPressed(global.debugRoomButtonD)) {
        if (room_get_name(room_next(room)) != "rTemplate") {
            instance_destroy(objPlayer);
            room_goto_next();
        }
    }
    
    //Decrease room speed
    if (scrButtonHeld(global.debugSpeedButtonD)) {
        if (room_speed &gt; 1) {
            room_speed--;
        }
    }
    
    //Increase room speed
    if (scrButtonHeld(global.debugSpeedButtonU)) {
        if (room_speed &lt; 250) {
            room_speed++;
        }
    }
    
    //Reset room speed
    if (scrButtonHeld(global.debugSpeedButtonR)) {
        room_speed = 50;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = prevSpd;

if (!instance_exists(objPlayMusic)) {
    scrGetMusic();
}
part_particles_clear(global.psys2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gameStarted) {
    scrRestartGame();
    scrSaveGame(false);
}

scrSaveConfig();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrInitGlobals();
pauseDelay = global.totalPauseDelay;
room_goto(rTitle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause overlay
if (global.gamePaused) {
    draw_sprite(pauseSpr, 0, 0, 0);

    draw_set_alpha(0.4);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), 0);
    
    draw_set_alpha(1);
    draw_set_font(fntPause1);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(display_get_gui_width() / 2, display_get_gui_height() / 2 - 64, "PAUSE");
    
    draw_set_font(fntPause2);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(20, 516, string_interp("Volume: {0}%", ceil(global.soundVolume * 100)));
    draw_text(20, 541, string_interp("Deaths: {0}", global.deaths));
    draw_text(20, 566, string_interp("Time: {0}", scrFormattedTime(global.time)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug overlay
if (global.debugMode &amp;&amp; global.debugOverlay) {
    var spacing = 22;
    draw_set_font(fntMenu3);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);

    if (global.gameStarted) {
        var xx = "N/A";
        var yy = "N/A";
        var align = "N/A";
        
        if (instance_exists(objPlayer)) {
            xx = objPlayer.x;
            yy = objPlayer.y;
            align = xx % 3;
        }
    
        scrDrawTextOutline(0, spacing * 0, string_interp("Player (X, Y, Align, Grav): ({0}, {1}, {2}, {3})", xx, yy, align, global.grav));
        scrDrawTextOutline(0, spacing * 1, string_interp("Room: {0}", room_get_name(room)));
        scrDrawTextOutline(0, spacing * 2, string_interp("Room speed: {0}", room_speed));
        scrDrawTextOutline(0, spacing * 3, string_interp("FPS: {0}", fps));
        scrDrawTextOutline(0, spacing * 4, string_interp("FPS real: {0}", fps_real));
        scrDrawTextOutline(0, spacing * 5, string_interp("Object counter: {0}", instance_count));
        
        if (global.currentAvoidance != noone) {
            scrDrawTextOutline(0, spacing * 6 + 6, string_interp("Killer counter: {0}", instance_number(objPlayerKiller)));
            scrDrawTextOutline(0, spacing * 7 + 6, string_interp("Timeline: {0}", timeline_get_name(global.currentAvoidance.timeline_index)));
            scrDrawTextOutline(0, spacing * 8 + 6, string_interp("Timeline position: {0}", global.currentAvoidance.timeline_position));
            var musicLength = audio_sound_length(global.currentMusic);
            scrDrawTextOutline(0, spacing * 9 + 6, string_interp("Timeline end: {0}", musicLength * 50));
            var musicPosition = audio_sound_get_track_position(global.currentMusic);
            scrDrawTextOutline(0, spacing * 10 + 6, string_interp("Music time: {0} ({1}s)", scrFormattedTime(floor(musicPosition)), musicPosition));
            scrDrawTextOutline(0, spacing * 11 + 6, string_interp("Music length: {0} ({1}s)", scrFormattedTime(floor(musicLength)), musicLength));
        }
    } else {
        scrDrawTextOutline(0, 0, "Debug Mode", c_red);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
